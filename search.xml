<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[腾讯云CentOS7搭建Hexo博客]]></title>
    <url>%2Fblogs%2F2018%2F11%2F24%2F%E8%85%BE%E8%AE%AF%E4%BA%91CentOS7%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[准备工作Windows系统中： 具有 GitHub账号 已安装Git客户端 已安装XShell连接远程服务器 CentOS7系统中： 安装Nginx服务 安装Node.js服务（注意gcc版本必须是4.9及以上，否则不能安装成功） 安装Git进行部署 安装Git 用Xshell连接CentOS7云服务器 输入命令，安装Git，完成之后用git --version检查版本号1yum install git 创建Git用户Xshell中输入命令，创建Git用户1adduser git 修改权限1chmod 740 /etc/sudoers 编辑内容1vim /etc/sudoers 找到下面的内容12## Allow root to run any commands anywhereroot ALL=(ALL) ALL 按i进入编辑模式，在下面添加一行1git ALL=(ALL) ALL 按Esc退出编辑模式，按:wq保存退出，再输入下面的语句更改权限1chmod 400 /etc/sudoers 使用su root切换到root用户，然后设置Git用户的密码123#需要root权限su rootsudo passwd git 创建.ssh文件夹1mkdir /home/git/.ssh 使用下面的命令新建一个SSH Key，youremail是你自己的邮箱，连续三个回车12cd /home/git/.sshssh-keygen -t rsa -C &quot;youremail&quot; 使用ls -a查看隐藏文件，此时应该有id_rsa.pub文件，用cat命令查看再手动拷贝其内容12ls -acat /home/git/.ssh/id_rsa.pub CentOS和Ubuntu系统下的拷贝命令是Ctrl + insert，，粘贴命令是Shift + insert 创建authorized_keys文件，将刚刚复制的内容拷贝到这个文件中1vim /home/git/.ssh/authorized_keys 修改文件和文件夹的权限12chmod 600 /home/git/.ssh/authorzied_keyschmod 700 /home/git/.ssh 验证是否可以登录成功在Windows系统中，打开Git Bash软件，输入ssh -v git@SERVER命令，其中SERVER是云服务器的IP地址，如果能够连接，那么说明ssh可以免密登录 安装Hexo在Xshell中，通过npm进行全局安装hexo框架1npm install -g hexo-cli 进入Nginx存放网站的根目录/usr/local/nginx/html，初始化Hexo1hexo init Blog 输入hexo s开启服务器，此时可以通过SERVERIP:4000访问，其中SERVERIP指的是云服务器的公网地址。但是这并没有部署到云服务器上，因为控制台按Ctrl + C就停止了 部署用cd /home/git切换到Git用户的目录初始化裸仓库1git init --bare blog.git 改变其拥有者为git用户1chown -R git:git hexo.git 新建post-receive文件1vim /home/git/blog.git/hooks/post-receive 在文件中输入下面的内容，在这里我的网站目录是/usr/local/nginx/html/blog，我的仓库目录是/home/git/blog.git请根据具体情况进行修改12#！/bin/shgit --work-tree=/usr/share/nginx/html/blog --git-dir=/home/git/blog.git checkout -f 保存退出，赋予可执行权限1chmod +x ~/blog.git/hooks/post-receive 配置配置Deployment进入到博客根目录进行配置12cd /usr/local/nginx/html/blogvim _config.yml 找到deploy部分，替换成如下内容，其中SERVERIP为云服务器的外网IP地址1234deploy: type: git repo: git@SERVERIP:/home/git/blog.git branch: master 配置URL在博客根目录中，对_config.yml编辑，找到URL部分其中SERVERIP为云服务器的外网IP地址完成之后，到Xshell中/blog目录下，执行hexo g -d命令然后打开浏览器，输入http://SERVERIP/blog/1234url: http://SERVERIProot: /blog/permalink: :year/:month/:day/:title/permalink_defaults:]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo采用Next主题]]></title>
    <url>%2Fblogs%2F2018%2F11%2F23%2FHexo%E9%87%87%E7%94%A8Next%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[由于Hexo默认的主题是landscape，于是我想将主题改为Next 安装Next在博客根目录下，右键，选择Git Bash Here 输入命令：git clone https://github.com/iissnan/hexo-theme-next themes/next 由于经常要涉及到配置文件，根目录（D:\blog）有一个_config.yml，主题目录（D:\blog\themes\next）下也有一个_config.yml于是将根目录下的配置文件称为站点配置文件，主题目录下的配置文件称为主题配置文件， 启用Next主题编辑站点配置文件，找到theme关键字，将其值修改为next，如下所示1theme: next 注意冒号后面有一个空格，所有配置文件，键后面是冒号，冒号后面都有空格 设置主题next主题有四种风格，在主题配置文件中，将scheme设置为喜欢的风格 设置语言在站点配置文件中，将language设置为中文，注意，这个语言必须在主题的language目录下面有才行 修改菜单项在主题的配置文件中，选择想要展示的部分，#是注释，||后面是图标的名字，对应着FontAwesome图标库里的名字，Next主题默认的FontAwesome版本为3 设置头像在站点配置文件中，新增avatar键，值为链接的地址1avatar: https://i.loli.net/2018/11/23/5bf79ec4d552f.png 添加标签如果在主题配置文件中的menu选项中开启了标签（tags），那么在博客主页中有标签图标，但是点进去，会有Cannot GET /tags/，这是因为还没有增加标签页面 新建页面cmd进入博客根目录，输入hexo new page tags1D:\blog&gt;hexo new page tags 修改type编辑刚刚新建的index.md文件，新增type属性，值为&quot;tags&quot; 为文章添加标签当需要为文章添加标签时，填入tags对应的值即可，如果有多个，用中括号括起来，标签之间用逗号隔开逗号必须是英文的 categories，about等页面添加的方式和tags添加的方式一样 在博客页面的右上角添加Github导航条在GitHub Ribbons或者GitHub Corners选择想要的GitHub样式，复制代码，到主题目录（根目录下的themes/next）下的layout/_layout.swig编辑这个文件，在合适的位置 加入div，为&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt; 粘贴刚刚拷贝的链接，注意将href中的链接进行修改，you改为自己的用户名就行了 设置动态背景在主题配置文件中，找到canvas_nest键，修改其值为true1canvas_nest: true 修改文章内链接的样式到主题目录(themes/next)下的source/css/_common/components/post/post.styl，在文件的末尾添加下列代码 1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; //原始链接颜色 border-bottom: none; border-bottom: 1px solid #0593d3; //底部分割线颜色 &amp;:hover &#123; color: #fc6423; //鼠标经过颜色 border-bottom: none; border-bottom: 1px solid #fc6423; //底部分割线颜色 &#125;&#125; 修改底部标签的样式到主题目录下的layout\_macro\post.swig，搜索rel=&quot;tag&quot;&gt;#，将#替换为&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 修改单行代码块的样式到主题目录下的source\css\_custom\custom.styl，添加下列代码123456789101112131415// Custom styles.code &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125; 侧边栏的小图标打开主题配置文件，搜索social选择需要展示的社交账号格式为： [社交平台名]: [社交地址] || [图标名称] 文章主页添加阴影效果打开主题目录下的source\css\_custom\custom.styl，添加下面的代码12345678// 主页文章添加阴影效果.post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 博客内添加搜索功能 安装 hexo-generator-search npm install hexo-generator-search —save 安装 hexo-generator-searchdb npm install hexo-generator-searchdb —save 编辑站点配置文件，添加以下内容 12345search: path: search.xml field: post format: html limit: 10000 编辑主题配置文件，搜索local search，设置为true 添加网易云外链 打开网易云音乐，登录账户，进入我的主页，选择歌单，生成外链播放器，拷贝HTML代码 将代码粘贴到合适的位置，比如主题目录下的layout/_macro/sidebar.swig]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github+Hexo+Next搭建个人博客]]></title>
    <url>%2Fblogs%2F2018%2F11%2F23%2FGithub-Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[安装Node.js环境进入Nodejs官网下载稳定版本一路next，安装好后，打开cmd，如果显示nodejs和npm版本号，则安装成功 安装Git进入Git官网下载合适的版本如果在任意一个文件夹下面都有这两个，那么安装Git成功 注册一个GitHub账户新建一个项目， 名称为账户名.github.io，勾选Initialize this repository with a README 如果已经有一个项目名称为账户名.github.io，那么新建项目的项目名称直接为项目名 点击项目的设置 下拉到GitHub Pages部分，Source下拉框的选项如果是None，那么要改为master branch，点击save按钮保存，上方会显示一个网址，这个就是被部署到外网的网址，能够通过外网访问 本地安装Hexo在本地创建一个文件夹，作为博客系统的根目录，我在D盘建立了一个blog文件夹，然后cmd进入这个目录 输入npm install hexo -g，开始安装Hexo 输入hexo -v，检查hexo是否安装成功 输入hexo init，初始化该文件夹 输入npm install，安装所需要的组件 输入hexo g，g是generate的缩写 输入hexo s，s是start的缩写，表明开启服务器，此时浏览器打开该网址 如果出现下图，那么Hexo就搭建成功了 Problem：如果无法访问，那么是端口被占用，使用hexo server -p 端口号，切换端口即可，这里端口号是用户的端口号，不能和常用端口号冲突，所以最好使用1024到5000的端口号 本地连接GitHub现在只是在本地上搭建成功，没有上传到GitHub上，外网不能访问，那么要将本地与GitHub联系起来。 在博客根目录下，右键，选择Git Bash Here 设置用户名，邮箱 使用git config --global user.name &quot;username&quot;设置用户名，注意username是自己的GitHub用户名，邮箱是GitHub邮箱 使用git config --global user.email &quot;email&quot;设置邮箱，注意eamil指的是自己的GitHub绑定的邮箱 输入 cd ~/.ssh，再输入ls查看该文件夹下的文件，注意~表示家目录，指的是当前用户的目录，Windows系统中如果不是Administrator，则为C://Users//username，如果是Administrator则为C://Users//AdministratorLinux系统中如果不是root则为/home/username，如果是root则为/root反正cd ~/.ssh就是要进入当前目录下的.ssh文件夹 输入ssh-keygen -t rsa -C &quot;eamil&quot;，这里的email是自己的GitHub绑定的邮箱地址，连续三个回车 在当前用户目录下的.ssh文件夹下，有个id_rsa.pub文件，复制其内容 到GitHub网站，在Settings页面左边的SSH and GPG keys部分，新建一个SSH keys，粘贴刚刚复制过来的内容，匹配密钥对 再到Git中，输入ssh -T git@github.com，如果出现Hi，username，那么表明本地成功连接了GitHub 配置deployment，在项目文件夹中，找到配置文件_config.yml，修改repo的值，增加branch的值为master repo的值是GitHub项目右下角，Use SSH的，以git结尾的一个链接， 默认是Use HTTPS，使用Use SSH选项就能看到以git结尾的链接。复制这个以git结尾的链接，粘贴到配置文件_config.yml，修改repo的值 cmd进入博客根目录，安装一个扩展，npm install hexo-deployer-git --save 新建一片博客，在cmd进入根目录后，用hexo new post &quot;文章名&quot; 找到那篇文章，文章是以.md结尾，Markdown格式，编辑内容，使用hexo d -g生成并且部署到GitHub上，使用之前GitHub Pages的网址就能够访问了]]></content>
  </entry>
  <entry>
    <title><![CDATA[nice to see you]]></title>
    <url>%2Fblogs%2F2018%2F11%2F19%2Fnice-to-see-you%2F</url>
    <content type="text"><![CDATA[欢迎使用 Cmd Markdown 编辑阅读器 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 支持以 PDF 格式导出文稿 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 新增 Todo 列表功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式LaTeXE=mc^23. 高亮一段代码code1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ someones 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 LaTeX. 支持 LaTeX 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 &#8617; code. 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。 &#8617; st=>start: Start op=>operation: Your Operation cond=>condition: Yes or No? e=>end st->op->cond cond(yes)->e cond(no)->op{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12} var code = document.getElementById("flowchart-0-code").value; var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value)); var diagram = flowchart.parse(code); diagram.drawSVG("flowchart-0", options);]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>tags</tag>
        <tag>nice-to-see-you</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fblogs%2F2018%2F11%2F19%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment \begin{eqnarray} \nabla\cdot\vec{E} &=& \frac{\rho}{\epsilon_0} \\ \nabla\cdot\vec{B} &=& 0 \\ \nabla\times\vec{E} &=& -\frac{\partial B}{\partial t} \\ \nabla\times\vec{B} &=& \mu_0\left(\vec{J}+\epsilon_0\frac{\partial E}{\partial t} \right) \end{eqnarray}]]></content>
  </entry>
</search>
